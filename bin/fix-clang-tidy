#!/bin/bash

source scripts/logging.sh

CLANG_TIDY="/opt/pkg/llvm/llvm_16.0.5/bin/clang-tidy"
CLANG_TIDY_OPTIONS=(-p build \
--fix-errors \
--extra-arg=-Wno-error=unknown-warning-option \
--extra-arg=-Weverything \
--extra-arg=-Wno-c++98-compat \
--extra-arg=-Wno-c++98-compat-pedantic \
--extra-arg=-Wno-switch-enum \
--extra-arg=-Wno-padded \
--extra-arg=-Wno-declaration-after-statement \
--extra-arg=-nostdinc++ \
--quiet)

function fix_clang_tidy()
{
  [[ ! -d $1 ]] && error "did not find directory '$1'..." && exit 1
  verbose_info "run clang-tidy for headers in '$1'"
  
  FILES=$(find "$1" -regextype posix-extended -regex ".*\.(c|h|cpp|hpp)$")
  NUM_FILES=$(echo "${FILES}" | wc -l)
  PROCESSED=0

  for FILE in ${FILES}; do
    CLANG_TIDY_CHECKS_ARG="--checks="
    INCR="${BOLD}[$((++PROCESSED)) of ${NUM_FILES}]${RESET}"

    [[ ${FILE} =~ /shaders/ ]] \
      && verbose_info "skip ${ITALIC}${FILE}${RESET} ${INCR}" \
      && continue

    [[ -z "${FILE##*"_test.cpp"*}" ]] \
      && CLANG_TIDY_CHECKS_ARG="--checks=-readability-function-size"

    verbose_info "checking ${ITALIC}${FILE}${RESET} ${INCR}"
    ${CLANG_TIDY} "${CLANG_TIDY_OPTIONS[@]}" "${CLANG_TIDY_CHECKS_ARG}" "${FILE}"
    echo "${FILE}"
  done
}

[[ ! -f build/compile_commands.json ]] \
  && error "missing build/compile_commands.json" && exit 1

fix_clang_tidy "$1"

